version: 2
 jobs:
   build:
     working_directory: ~/
     docker:
       - image: circleci/python:2
     steps:
       - checkout
       - run: echo "hello world"


# version: 2
# jobs:
#   build:
#     docker:
#       # using custom image, see .circleci/images/primary/Dockerfile
#       - image: circleci/cci-demo-docker-primary:0.0.2
#       - image: postgres:9.4.1
#         environment:
#           POSTGRES_USER: ubuntu
#           POSTGRES_DB: contacts
#     working_directory: /go/src/github.com/circleci/cci-demo-docker

#     environment:
#       TEST_RESULTS: /tmp/test-results

#     steps:
#       - checkout

#       - run:
#           name: Waiting for Postgres to be ready
#           command: |
#             for i in `seq 1 10`;
#             do
#               nc -z localhost 5432 && echo Success && exit 0
#               echo -n .
#               sleep 1
#             done
#             echo Failed waiting for Postgress && exit 1

#       - run: mkdir -p $TEST_RESULTS

#       - run:
#           name: Run unit tests
#           environment:
#             DATABASE_URL: "postgres://ubuntu@localhost:5432/contacts?sslmode=disable"
#             DB_MIGRATIONS: /go/src/github.com/circleci/cci-demo-docker/db/migrations
#           command: |
#             set -ou pipefail
#             trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
#             # Notice this `set -o pipefail`, this will cause script to fail if `make test` fails
#             # without this option script will return success regardless of testing result due to pipe after test command
#             make test | tee ${TEST_RESULTS}/go-test.out

#       - setup_remote_docker

#       # This should go into custom primary image, here's only for the sake of explanation
#       - run:
#           name: Install Docker client
#           command: |
#             set -x
#             VER="17.03.0-ce"
#             curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
#             tar -xz -C /tmp -f /tmp/docker-$VER.tgz
#             mv /tmp/docker/* /usr/bin

#       - run:
#           name: Build service
#           command: make

#       - run:
#           name: Build and push Docker image
#           command: |
#             TAG="0.1.${CIRCLE_BUILD_NUM}"
#             docker build -t circleci/cci-demo-docker:$TAG .
#             docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#             docker push circleci/cci-demo-docker:$TAG

#       - store_artifacts:
#           path: /tmp/test-results
#           destination: raw-test-output

#       - store_test_results:
#           path: /tmp/test-results






# box:
#   id: quay.io/opentargets/mrtarget_base
#   tag: latest
#   registry: quay.io
# services:
#   - elasticsearch:2.4
# command-timeout: 60
# no-response-timeout: 10
# build:
#   steps:
#     - script:
        
#     - pip-install
# #    - script:
# #        name: manually install the current package mrtarget
# #        code: |
# #          sudo pip install --process-dependency-links -r requirements.txt
# #          # sudo python setup.py install
#     - script: 
#         name: export variables for pipeline
#         code: |
#           export CTTV_MINIMAL=True
#           export ELASTICSEARCH_NODES=http://${ELASTICSEARCH_PORT_9200_TCP_ADDR}:${ELASTICSEARCH_PORT_9200_TCP_PORT}
#     - script:
#         name: test empty run to catch import errors
#         code: |
#           echo will be using the ES available at $ELASTICSEARCH_NODES
#           mrtarget --dry-run
    
#     - script:
#         name: copy to /usr/src/app working dir
#         code: |
#           cp -R $WERCKER_ROOT/* /usr/src/app
#     - script:
#       name: export latest or dev tag
#       code: |
#         [ "$WERCKER_GIT_BRANCH" = "master" ] \
#         && export LATEST_FLAG=latest \
#         || export LATEST_FLAG=dev

#     #push to registries
#     - internal/docker-push:
#         username: $QUAY_USERNAME
#         password: $QUAY_PASSWORD
#         tag: $WERCKER_GIT_COMMIT, $WERCKER_GIT_BRANCH, $LATEST_FLAG
#         repository: $QUAY_REPO
#         registry: $QUAY_HOST
#         working-dir: /usr/src/app
#         cmd: mrtarget
#         disable-sync: true

#     - internal/docker-push:
#         username: _json_key
#         password: $GCR_JSON_KEY_FILE
#         working-dir: /usr/src/app
#         tag: $WERCKER_GIT_COMMIT, $WERCKER_GIT_BRANCH, $LATEST_FLAG
#         repository: $GCR_REPO
#         registry: $GCR_HOST
#         cmd: mrtarget
#         disable-sync: true




